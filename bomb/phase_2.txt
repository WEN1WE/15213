
*arg1 = (%rdi) = "1 2 4 8 16 32"(my input)
(gdb) x/a  0x7fffffffdd30
0x7fffffffdd30: 0x200000001
(gdb) x/a 0x7fffffffdd34
0x7fffffffdd34: 0x300000002
(gdb) x/a 0x7fffffffdd38
0x7fffffffdd38: 0x400000004
(gdb) x/a 0x7fffffffdd3c
0x7fffffffdd3c: 0x500000008
(gdb) x/a 0x7fffffffdd40
0x7fffffffdd40: 0x600000010
(gdb) x/a 0x7fffffffdd44
0x7fffffffdd44: 0x40143100000020



0000000000400efc <phase_2>:
  400efc:	55                   	push   %rbp   // Save %rbp
  400efd:	53                   	push   %rbx   // Save %rbx   
  400efe:	48 83 ec 28          	sub    $0x28,%rsp   // Allocate 28 bytes for stack frame, %rsp = 0x7fffffffdd30
  400f02:	48 89 e6             	mov    %rsp,%rsi    // arg2 = %rsi = 0x7fffffffdd30
  400f05:	e8 52 05 00 00       	callq  40145c <read_six_numbers>  // Call read_six_numbers(arg1, arg2), return %eax = 6
  400f0a:	83 3c 24 01          	cmpl   $0x1,(%rsp) // (%rsp) = 0x200000001  
  400f0e:	74 20 1               je     400f30 <phase_2+0x34> // goto 400f30
  400f10:	e8 25 05 00 00       	callq  40143a <explode_bomb>
  400f15:	eb 19                	jmp    400f30 <phase_2+0x34>
  400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax // %rax = 1, %rax = 2
  400f1a:	01 c0                	add    %eax,%eax  // %rax = 2, %rax = 4
  400f1c:	39 03                	cmp    %eax,(%rbx)  // (%rbx) = 0x300000002,
  400f1e:	74 05                	je     400f25 <phase_2+0x29> 
  400f20:	e8 15 05 00 00       	callq  40143a <explode_bomb>
  400f25:	48 83 c3 04          	add    $0x4,%rbx // %rbx = 0x7fffffffdd38  (%rbx) = 0x400000004
  400f29:	48 39 eb             	cmp    %rbp,%rbx // %rbp = 0x7fffffffdd48, not equal goto loop
  400f2c:	75 e9                	jne    400f17 <phase_2+0x1b>
  400f2e:	eb 0c                	jmp    400f3c <phase_2+0x40>
  400f30:	48 8d 5c 24 04       	lea    0x4(%rsp),%rbx  // %rbx = 0x7fffffffdd34
  400f35:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp // %rbp = 0x7fffffffdd48
  400f3a:	eb db                	jmp    400f17 <phase_2+0x1b> // goto 400f17
  400f3c:	48 83 c4 28          	add    $0x28,%rsp
  400f40:	5b                   	pop    %rbx
  400f41:	5d                   	pop    %rbp
  400f42:	c3                   	retq  

/** Caculate how many numbers are in the input. */
  000000000040145c <read_six_numbers>:
  40145c: 48 83 ec 18           sub    $0x18,%rsp   // Allocate 28 bytes for stack frame, %rsp = 0x7fffffffdd10 
  401460: 48 89 f2              mov    %rsi,%rdx    // %rdx = 0x7fffffffdd30
  401463: 48 8d 4e 04           lea    0x4(%rsi),%rcx // %rcx = 0x7fffffffdd34
  401467: 48 8d 46 14           lea    0x14(%rsi),%rax // %rax =  0x7fffffffdd44
  40146b: 48 89 44 24 08        mov    %rax,0x8(%rsp) // (%rsp + 8) = (0x7fffffffdd18) = 0x7fffffffdd44
  401470: 48 8d 46 10           lea    0x10(%rsi),%rax // %rax = 0x7fffffffdd40
  401474: 48 89 04 24           mov    %rax,(%rsp)  // (%rsp) = (0x7fffffffdd10) = 0x7fffffffdd40
  401478: 4c 8d 4e 0c           lea    0xc(%rsi),%r9 // %r9 =  0x7fffffffdd3c
  40147c: 4c 8d 46 08           lea    0x8(%rsi),%r8 // %r8 = 0x7fffffffdd38
  401480: be c3 25 40 00        mov    $0x4025c3,%esi // %esi = 0x4025c3, (%rsi) = "%d %d %d %d %d %d"
  401485: b8 00 00 00 00        mov    $0x0,%eax  // %eax = 0
  40148a: e8 61 f7 ff ff        callq  400bf0 <__isoc99_sscanf@plt> // %eax = 6
  40148f: 83 f8 05              cmp    $0x5,%eax // not boom!
  401492: 7f 05                 jg     401499 <read_six_numbers+0x3d>
  401494: e8 a1 ff ff ff        callq  40143a <explode_bomb>
  401499: 48 83 c4 18           add    $0x18,%rsp
  40149d: c3                    retq
